name: Lighthouse Performance Monitoring

on:
  pull_request:
    branches: [ main, develop ]
  push:
    branches: [ main, develop ]

jobs:
  lighthouse-pr:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Install Lighthouse CI
        run: npm install -g @lhci/cli@0.12.x

      - name: Run Lighthouse CI (Informational)
        run: |
          echo "üö® Running Lighthouse audit for informational purposes..."
          lhci autorun --config=./lighthouserc.cjs || echo "‚ö†Ô∏è Lighthouse audit completed with issues - check results below"
        continue-on-error: true

      - name: Extract Lighthouse Scores
        id: lighthouse-scores
        run: |
          # Find the latest lighthouse results
          RESULTS_FILE=$(find lighthouse-results -name "*.json" -type f | sort -n | tail -1)
          
          if [ -f "$RESULTS_FILE" ]; then
            echo "üìä Extracting scores from: $RESULTS_FILE"
            
            # Extract scores using Node.js
            node -e "
              const fs = require('fs');
              try {
                const results = JSON.parse(fs.readFileSync('$RESULTS_FILE', 'utf8'));
                
                // Handle different Lighthouse result structures
                let scores;
                if (results.lhr && results.lhr.categories) {
                  scores = results.lhr.categories;
                } else if (results.categories) {
                  scores = results.categories;
                } else if (Array.isArray(results) && results[0] && results[0].lhr) {
                  scores = results[0].lhr.categories;
                } else if (Array.isArray(results) && results[0] && results[0].categories) {
                  scores = results[0].categories;
                } else {
                  console.log('PERFORMANCE=0');
                  console.log('ACCESSIBILITY=0');
                  console.log('BEST_PRACTICES=0');
                  console.log('SEO=0');
                  console.log('PWA=0');
                  process.exit(0);
                }
              
              const performance = Math.round((scores.performance?.score || 0) * 100);
              const accessibility = Math.round((scores.accessibility?.score || 0) * 100);
              const bestPractices = Math.round((scores['best-practices']?.score || 0) * 100);
              const seo = Math.round((scores.seo?.score || 0) * 100);
              const pwa = Math.round((scores.pwa?.score || 0) * 100);
              
              console.log('PERFORMANCE=' + performance);
              console.log('ACCESSIBILITY=' + accessibility);
              console.log('BEST_PRACTICES=' + bestPractices);
              console.log('SEO=' + seo);
              console.log('PWA=' + pwa);
              
              // Save to GitHub outputs
              const output = [
                'performance=' + performance,
                'accessibility=' + accessibility,
                'best_practices=' + bestPractices,
                'seo=' + seo,
                'pwa=' + pwa
              ].join('\\n');
              
              console.log('Writing to GITHUB_OUTPUT:', output);
              
              } catch (error) {
                console.log('Error parsing results:', error.message);
                console.log('PERFORMANCE=0');
                console.log('ACCESSIBILITY=0');
                console.log('BEST_PRACTICES=0');
                console.log('SEO=0');
                console.log('PWA=0');
              }
            " >> $GITHUB_OUTPUT
          else
            echo "‚ö†Ô∏è No Lighthouse results found"
            echo "performance=0" >> $GITHUB_OUTPUT
            echo "accessibility=0" >> $GITHUB_OUTPUT
            echo "best_practices=0" >> $GITHUB_OUTPUT
            echo "seo=0" >> $GITHUB_OUTPUT
            echo "pwa=0" >> $GITHUB_OUTPUT
          fi

      - name: Comment PR with Lighthouse Scores
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const performance = '${{ steps.lighthouse-scores.outputs.performance }}';
            const accessibility = '${{ steps.lighthouse-scores.outputs.accessibility }}';
            const bestPractices = '${{ steps.lighthouse-scores.outputs.best_practices }}';
            const seo = '${{ steps.lighthouse-scores.outputs.seo }}';
            const pwa = '${{ steps.lighthouse-scores.outputs.pwa }}';
            
            // Score emoji helper
            const getScoreEmoji = (score) => {
              if (score >= 90) return 'üü¢';
              if (score >= 70) return 'üü°';
              return 'üî¥';
            };
            
            // Score color helper  
            const getScoreColor = (score) => {
              if (score >= 90) return 'success';
              if (score >= 70) return 'warning';
              return 'critical';
            };
            
            const comment = \`## üö® Lighthouse Performance Report
            
            üìä **Lighthouse Scores for this PR:**
            
            | Category | Score | Status |
            |----------|-------|--------|
            | ${getScoreEmoji(performance)} **Performance** | ${performance}/100 | ${performance >= 95 ? '‚úÖ Excellent' : performance >= 90 ? '‚ö†Ô∏è Good' : '‚ùå Needs Improvement'} |
            | ${getScoreEmoji(accessibility)} **Accessibility** | ${accessibility}/100 | ${accessibility >= 100 ? '‚úÖ Perfect' : accessibility >= 95 ? '‚ö†Ô∏è Good' : '‚ùå Needs Improvement'} |
            | ${getScoreEmoji(bestPractices)} **Best Practices** | ${bestPractices}/100 | ${bestPractices >= 100 ? '‚úÖ Perfect' : bestPractices >= 95 ? '‚ö†Ô∏è Good' : '‚ùå Needs Improvement'} |
            | ${getScoreEmoji(seo)} **SEO** | ${seo}/100 | ${seo >= 100 ? '‚úÖ Perfect' : seo >= 95 ? '‚ö†Ô∏è Good' : '‚ùå Needs Improvement'} |
            | ${getScoreEmoji(pwa)} **PWA** | ${pwa}/100 | ${pwa >= 90 ? '‚úÖ Excellent' : pwa >= 80 ? '‚ö†Ô∏è Good' : '‚ùå Needs Improvement'} |
            
            ### üéØ **Government Compliance Status:**
            - **Section 508**: ${accessibility >= 100 ? '‚úÖ Compliant' : '‚ùå Non-Compliant'}
            - **WCAG 2.1 AA**: ${accessibility >= 100 ? '‚úÖ Compliant' : '‚ùå Non-Compliant'}
            - **Security Headers**: ${bestPractices >= 95 ? '‚úÖ Secure' : '‚ö†Ô∏è Review Needed'}
            
            ${performance < 95 || accessibility < 100 || bestPractices < 95 || seo < 95 ? 
              \`### ‚ö†Ô∏è **Recommendations:**
              ${performance < 95 ? '- üöÄ **Performance**: Consider optimizing images, reducing bundle size, or improving loading speed\\n' : ''}
              ${accessibility < 100 ? '- ‚ôø **Accessibility**: Review color contrast, ARIA labels, and keyboard navigation\\n' : ''}
              ${bestPractices < 95 ? '- üõ°Ô∏è **Security**: Check CSP headers, HTTPS configuration, and third-party libraries\\n' : ''}
              ${seo < 95 ? '- üîç **SEO**: Improve meta tags, structured data, or page titles\\n' : ''}
              \` : 
              '### üéâ **Excellent work!** All scores meet or exceed government standards.'
            }
            
            <details>
            <summary>üìà View Detailed Results</summary>
            
            Full Lighthouse report available in workflow artifacts.
            
            **Testing Environment:**
            - Build: Preview server (localhost:4173)
            - Device: Desktop simulation
            - Network: Simulated fast 3G
            
            </details>
            
            ---
            *This is an automated Lighthouse audit. Scores may vary between local and production environments.*
            \`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

      - name: Upload Lighthouse Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: lighthouse-results-pr-${{ github.event.number }}
          path: lighthouse-results/
          retention-days: 30

  lighthouse-push:
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Install Lighthouse CI
        run: npm install -g @lhci/cli@0.12.x

      - name: Run Lighthouse CI (Push)
        run: |
          echo "üö® Running Lighthouse audit on push to ${{ github.ref_name }}..."
          lhci autorun --config=./lighthouserc.cjs || echo "‚ö†Ô∏è Lighthouse audit completed - check results"
        continue-on-error: true

      - name: Generate Performance Summary
        run: |
          echo "## üìä Lighthouse Performance Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Find and parse latest results
          RESULTS_FILE=$(find lighthouse-results -name "*.json" -type f | sort -n | tail -1)
          
          if [ -f "$RESULTS_FILE" ]; then
            echo "üìà **Lighthouse Scores:**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            
            node -e "
              const fs = require('fs');
              try {
                const results = JSON.parse(fs.readFileSync('$RESULTS_FILE', 'utf8'));
                
                // Handle different Lighthouse result structures
                let scores;
                if (results.lhr && results.lhr.categories) {
                  scores = results.lhr.categories;
                } else if (results.categories) {
                  scores = results.categories;
                } else if (Array.isArray(results) && results[0] && results[0].lhr) {
                  scores = results[0].lhr.categories;
                } else if (Array.isArray(results) && results[0] && results[0].categories) {
                  scores = results[0].categories;
                } else {
                  console.log('‚ö†Ô∏è No valid Lighthouse scores found');
                  process.exit(0);
                }
              
              const performance = Math.round((scores.performance?.score || 0) * 100);
              const accessibility = Math.round((scores.accessibility?.score || 0) * 100);
              const bestPractices = Math.round((scores['best-practices']?.score || 0) * 100);
              const seo = Math.round((scores.seo?.score || 0) * 100);
              const pwa = Math.round((scores.pwa?.score || 0) * 100);
              
              const getEmoji = (score) => score >= 90 ? 'üü¢' : score >= 70 ? 'üü°' : 'üî¥';
              
              console.log('| Category | Score | Status |');
              console.log('|----------|-------|--------|');
              console.log(\`| \${getEmoji(performance)} Performance | \${performance}/100 | \${performance >= 95 ? 'Excellent' : performance >= 90 ? 'Good' : 'Needs Improvement'} |\`);
              console.log(\`| \${getEmoji(accessibility)} Accessibility | \${accessibility}/100 | \${accessibility >= 100 ? 'Perfect (Section 508)' : 'Needs Improvement'} |\`);
              console.log(\`| \${getEmoji(bestPractices)} Best Practices | \${bestPractices}/100 | \${bestPractices >= 95 ? 'Excellent (Secure)' : 'Review Needed'} |\`);
              console.log(\`| \${getEmoji(seo)} SEO | \${seo}/100 | \${seo >= 95 ? 'Excellent' : seo >= 90 ? 'Good' : 'Needs Improvement'} |\`);
              console.log(\`| \${getEmoji(pwa)} PWA | \${pwa}/100 | \${pwa >= 90 ? 'Excellent' : pwa >= 80 ? 'Good' : 'Needs Work'} |\`);
              
              // Government compliance summary
              const isCompliant = accessibility >= 100 && bestPractices >= 95 && seo >= 95 && performance >= 90;
              console.log('');
              console.log(\`**üèõÔ∏è Government Standards:** \${isCompliant ? '‚úÖ FULLY COMPLIANT' : '‚ö†Ô∏è REVIEW REQUIRED'}\`);
              
              } catch (error) {
                console.log('‚ùå Error parsing Lighthouse results:', error.message);
              }
            " >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ö†Ô∏è No results found" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Upload Lighthouse Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: lighthouse-results-${{ github.ref_name }}-${{ github.sha }}
          path: lighthouse-results/
          retention-days: 30
