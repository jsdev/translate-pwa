name: Deploy to GitHub Pages

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build for GitHub Pages
        run: npm run build:github
        env:
          GITHUB_PAGES: true
          GITHUB_REPOSITORY_OWNER: ${{ github.repository_owner }}

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: dist

  # Deployment job
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  # Run Lighthouse CI on the deployed site
  lighthouse:
    runs-on: ubuntu-latest
    needs: deploy
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build for GitHub Pages
        run: npm run build:github
        env:
          GITHUB_PAGES: true
          GITHUB_REPOSITORY_OWNER: ${{ github.repository_owner }}

      - name: Wait for deployment
        run: sleep 30

      - name: Run Lighthouse CI on deployed site
        run: |
          echo "üö® Running Lighthouse CI on production deployment..."
          npm run lighthouse:ci || echo "‚ö†Ô∏è Lighthouse audit completed - check results"
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_PAGES: true  # Tell Lighthouse config to use base path URLs
        continue-on-error: true

      - name: Generate Production Lighthouse Summary
        run: |
          echo "## üöÄ Production Lighthouse Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Production URL:** https://${{ github.repository_owner }}.github.io/translate-pwa/" >> $GITHUB_STEP_SUMMARY
          echo "**Deployment Time:** $(date)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Find and parse latest results
          RESULTS_FILE=$(find lighthouse-results -name "*.json" -type f | sort -n | tail -1)
          
          if [ ! -d "lighthouse-results" ]; then
            echo "‚ö†Ô∏è Lighthouse results directory not found" >> $GITHUB_STEP_SUMMARY
            echo "Available directories:" >> $GITHUB_STEP_SUMMARY
            ls -la >> $GITHUB_STEP_SUMMARY
          elif [ -z "$RESULTS_FILE" ]; then
            echo "‚ö†Ô∏è No Lighthouse results JSON files found" >> $GITHUB_STEP_SUMMARY
            echo "Contents of lighthouse-results directory:" >> $GITHUB_STEP_SUMMARY
            ls -la lighthouse-results/ >> $GITHUB_STEP_SUMMARY
          elif [ -f "$RESULTS_FILE" ]; then
            echo "üìä **Production Performance Scores:**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            
            node -e "
              const fs = require('fs');
              try {
                const results = JSON.parse(fs.readFileSync('$RESULTS_FILE', 'utf8'));
                
                // Handle different Lighthouse result structures
                // LHCI can generate different formats: lhr object or direct categories
                let scores;
                if (results.lhr && results.lhr.categories) {
                  scores = results.lhr.categories;
                } else if (results.categories) {
                  scores = results.categories;
                } else if (Array.isArray(results) && results[0] && results[0].lhr) {
                  scores = results[0].lhr.categories;
                } else if (Array.isArray(results) && results[0] && results[0].categories) {
                  scores = results[0].categories;
                } else {
                  console.log('‚ö†Ô∏è Unknown Lighthouse results structure');
                  console.log('Available keys:', Object.keys(results));
                  if (results.lhr) console.log('LHR keys:', Object.keys(results.lhr));
                  process.exit(1);
                }
                
                const performance = Math.round((scores.performance?.score || 0) * 100);
                const accessibility = Math.round((scores.accessibility?.score || 0) * 100);
                const bestPractices = Math.round((scores['best-practices']?.score || 0) * 100);
                const seo = Math.round((scores.seo?.score || 0) * 100);
                const pwa = Math.round((scores.pwa?.score || 0) * 100);
              
              const getEmoji = (score) => score >= 90 ? 'üü¢' : score >= 70 ? 'üü°' : 'üî¥';
              const getStatus = (score, category) => {
                if (category === 'accessibility' && score >= 100) return '‚úÖ WCAG Compliant';
                if (category === 'best-practices' && score >= 100) return '‚úÖ Secure';
                if (score >= 95) return '‚úÖ Excellent';
                if (score >= 90) return '‚ö†Ô∏è Good';
                return '‚ùå Needs Improvement';
              };
              
              console.log('| Category | Score | Status | Compliance |');
              console.log('|----------|-------|--------|------------|');
              console.log(\`| \${getEmoji(performance)} **Performance** | **\${performance}/100** | \${getStatus(performance)} | \${performance >= 95 ? 'Government Ready' : 'Review Needed'} |\`);
              console.log(\`| \${getEmoji(accessibility)} **Accessibility** | **\${accessibility}/100** | \${getStatus(accessibility, 'accessibility')} | \${accessibility >= 100 ? 'Section 508 ‚úÖ' : 'Section 508 ‚ùå'} |\`);
              console.log(\`| \${getEmoji(bestPractices)} **Best Practices** | **\${bestPractices}/100** | \${getStatus(bestPractices, 'best-practices')} | \${bestPractices >= 100 ? 'Security ‚úÖ' : 'Security ‚ö†Ô∏è'} |\`);
              console.log(\`| \${getEmoji(seo)} **SEO** | **\${seo}/100** | \${getStatus(seo)} | \${seo >= 95 ? 'Optimized ‚úÖ' : 'Review Needed'} |\`);
              console.log(\`| \${getEmoji(pwa)} **PWA** | **\${pwa}/100** | \${getStatus(pwa)} | \${pwa >= 90 ? 'App-Ready ‚úÖ' : 'Basic PWA'} |\`);
              
              // Overall compliance status
              const isCompliant = accessibility >= 100 && bestPractices >= 95 && performance >= 90;
              console.log('');
              console.log(\`**üèõÔ∏è Government Compliance:** \${isCompliant ? '‚úÖ FULLY COMPLIANT' : '‚ö†Ô∏è REVIEW REQUIRED'}\`);
              
              if (!isCompliant) {
                console.log('');
                console.log('**‚ö†Ô∏è Compliance Issues:**');
                if (accessibility < 100) console.log('- Accessibility score below 100 (Section 508 requirement)');
                if (bestPractices < 95) console.log('- Security/Best Practices score below 95');
                if (performance < 90) console.log('- Performance score below government standards');
              }
              
              } catch (error) {
                console.log('‚ùå Error parsing Lighthouse results:', error.message);
                console.log('Please check the Lighthouse CI configuration and output format.');
              }
            " >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ö†Ô∏è No Lighthouse results found" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Upload Lighthouse results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: lighthouse-results-production
          path: lighthouse-results/
          retention-days: 30
